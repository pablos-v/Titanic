version: '3'

networks:
  app-network:
    driver: bridge

volumes:
  cache:
    driver: local
  db-data-2:
    driver: local

services:

  eureka:
    image: titanic-eureka
    restart: always
    build:
      context: ./Eureka
      dockerfile: Dockerfile
    container_name: eureka
    networks:
      - app-network
    ports:
      - "8761:8761"

  backend:
    image: titanic-backend
    restart: always
    build:
      context: ./Backend
      dockerfile: Dockerfile
    container_name: backend
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy
    ports:
      - '8092:8092'
#    environment:
#      - SPRING_DATASOURCE_URL=jdbc:postgresql://db/postgres

  frontend:
    image: titanic-frontend
    restart: always
    build:
      context: ./Frontend
      dockerfile: Dockerfile
    container_name: frontend
    networks:
      - app-network
    depends_on:
      - backend
    ports:
      - '8089:8089'

  db:
    image: postgres:12-alpine
    restart: always
    container_name: postgres
    networks:
      - app-network
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=postgres
    ports:
      - '5434:5432'
    volumes:
      # инициация БД
      - ./src/main/resources/db/create_schema.sql:/docker-entrypoint-initdb.d
      - db-data-2:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "postgres", "-U", "user" ]
      interval: 1s
      timeout: 5s
      retries: 10

  redis:
    image: redis:7.2-rc-alpine
    restart: always
    container_name: redis
    networks:
      - app-network
    ports:
      - '6379:6379'
    command: redis-server --save 20 1 --loglevel warning --requirepass parole
    volumes:
      - cache:/data
